# Generated by Django 5.1.3 on 2024-11-29 14:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('row_number', models.IntegerField()),
                ('cage_number', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('season', models.CharField(choices=[('SPRING', 'Spring'), ('SUMMER', 'Summer'), ('AUTUMN', 'Autumn'), ('WINTER', 'Winter')], max_length=10)),
                ('composition', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Workshop',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('info', models.TextField()),
                ('rows', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('employee', 'Employee')], default='employee', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Breed',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('avg_eggs_per_month', models.IntegerField()),
                ('avg_weight', models.IntegerField()),
                ('diet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='breeds', to='app.diet')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('passport', models.IntegerField(unique=True)),
                ('salary', models.IntegerField()),
                ('contract', models.CharField(max_length=100)),
                ('termination', models.TextField(blank=True, null=True)),
                ('assigned_cages', models.ManyToManyField(related_name='employees', to='app.cage')),
            ],
        ),
        migrations.CreateModel(
            name='Hen',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('weight', models.IntegerField()),
                ('age', models.IntegerField()),
                ('eggs_per_month', models.IntegerField()),
                ('breed', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='hens', to='app.breed')),
                ('cage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hens', to='app.cage')),
            ],
        ),
        migrations.AddField(
            model_name='cage',
            name='workshop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cages', to='app.workshop'),
        ),
    ]
